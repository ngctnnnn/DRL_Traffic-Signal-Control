# extracting nodes/edges from data/examples/simple_nets/cross/cross1l
cross1l

# extracting nodes/edges from a broken network
broken

# find edges reachable from source
source

# find reachable edges from source restricted by vClass
source_vclass

# find reachable edges from source restricted by vClass
source_vclass_invalid

# account for bidirectional walking
source_vclass_pedestrian

# find edges that can reach the given destination
destination

# write weakly connected components to an edge selection
components

# write weakly connected components with edge types (network from netconvert/import/OSM/adlershof_dlr)
types

# get very weakly connected components (node graph)
ignore_connections
