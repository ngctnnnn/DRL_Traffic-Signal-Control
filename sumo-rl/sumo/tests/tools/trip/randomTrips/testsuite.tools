saveConfig
loadConfig
simple
begin_end_human_readable

# randomize departure times
random-depart

# randomize subsecond departure times
random-depart_subsecond

# fractional depart times
fractional

# make sure that source and sink are a minimum distance appart
minimum_distance
minimum_distance_exceeded

# increase the probability for trips to start and end at the fringe of the network.
# For this test, the turnarounds at the fringe have been removed since the fringe is detected by limited connectivity
fringe_factor

# test interaction of fringe factor and edge length (fringe should ignore length)
short_fringe

# detected the fringe despite turnarounds
fringe_factor_turnarounds

# use junction attribute 'fringe' for fringe classification
fringe-junctions

# disturb fastest-path-search
random-routing-factor

# modify the edge probability based on the edge position relative to the network center to promote a given direction of travel
angle

# consider vehicle class when picking source- and destination edges if option --vclass is used
vclass

# load the vehicle class to use during routing from an additional file
vclass_additional_file

# generate vType with the given vehicle_class and extra attributes
vehicle_class

# handle conflict between generated vType and user-defined vType attribute
vehicle_class_trip_attribute_vType

# generate vType with the given vehicle_class and extra attributes
vehicle_class_persontrips

# test trips with intermediate waypoints
intermediate

# test pedestrian trips with intermediate waypoints
intermediate_pedestrians

# write weights for visualization
weights_output

# load some weights
loaded_weights

# scale probability by edge param
edge_param
no_valid_edges
no_valid_intermediate_edges

# option --intermediate is given but no intermediate edges are available
no_valid_intermediate_edges_fail
pedestrians

# generate random persontrips
persontrips

# walks between junctions
pedestrians_junctionTaz

# generate random persontrips between junctions
persontrips_junctionTaz

# generate random taxi rides
taxirides

# use binomially distributed arrivals
binomial

# generate validated trips
validate
validate_intermediate

# setting non-positive period should fail
period_positive
all_fringe_network
flows

# create flows for jtrrouter (no to)
flows_jtrrouter
flows_binomial

# load the vehicle type to use during routing from an additional file
vtype_additional_file_validate

# some extra options that are passed  directly to duarouter
duarouter_options

# use fromJunction and toJunction
junctionTaz

# use fromJunction and toJunction with flows
junctionTaz_flow
junctionTaz_validate

# prevent some edge types from being used as source or destination
viaEdgeType
